<?xml version="1.0"?>
<project xmlns:mvn="urn:maven-artifact-ant" name="UNICORE UNICOREX Linux bundles" default="full-build">

	<description>Build the UNICOREX Linux bundle(s)</description>

        <!-- which version of the UNICORE/X to package -->
	<property name="unicorex.version" value="1.4.1-SNAPSHOT" />

        <!-- rpm/deb version to build -->
	<property name="default.version" value="6.4.1" />
	<property name="default.release" value="1" />

	<property name="mvn-repo-url" value="http://unicore-dev.zam.kfa-juelich.de/maven"/>

	<property name="libs" value="target/jars"/>

	<!-- directories for the rpm build -->
	<property name="rpm-src" value="src/rpm"/>
	<property name="rpm-base" value="${basedir}/target/rpm"/>
	<property name="rpm-libs" value="${rpm-base}/usr/share/unicore/unicorex/lib"/>

	<!-- directories for the deb build -->
	<property name="deb-src" value="src/deb"/>
	<property name="deb-base" value="${basedir}/target/deb"/>

	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
		<classpath>
			<pathelement location="./tools/maven-ant-tasks-2.1.0.jar"/>
		</classpath>
	</typedef>


	<!-- Build all the packages -->

	<target name="full-build" depends="rpm,deb"/>

	<!-- Set the right properties for local-repo, version, and release -->

	<target name="set-version-if-set" if="package.version">
		<echo message="... package.version is set to ${package.version}" />
		<property name="version" value="${package.version}" />
	</target>

	<target name="set-version-if-not-set" unless="package.version">
		<echo message="... package.version is not set. Using default set in build file: ${default.version} " />
		<property name="version" value="${default.version}" />
	</target>

	<target name="set-release-if-set" if="package.release">
		<echo message="... package.release is set to ${package.release}" />
		<property name="release" value="${package.release}" />
	</target>

	<target name="set-release-if-not-set" unless="package.release">
		<echo message="... package.release is not set" />
		<property name="release" value="${default.release}" />
	</target>

	<target name="set-mavenRepo-if-set" if="maven.repo.local">
		<echo message="... maven.repo.local is set to ${maven.repo.local}" />
		<property name="maven-repo" value="${maven.repo.local}" />
	</target>

	<target name="set-mavenRepo-if-not-set" unless="maven.repo.local">
		<echo message="... maven.repo.local is not set. Using default at ${user.home}/.m2/repository " />
		<property name="maven-repo" value="${user.home}/.m2/repository" />
	</target>

        <target name="setProps" depends="set-version-if-set, set-version-if-not-set,
			set-release-if-set, set-release-if-not-set, set-mavenRepo-if-set, set-mavenRepo-if-not-set" />

	<!-- get the latest jar files -->

	<target name="update-jars" depends="setProps">
		<echo>... updating jar files </echo>
		<mkdir dir="${libs}"/>

		<mvn:remoteRepository id="vsgc-public" url="${mvn-repo-url}"/>
		<mvn:localRepository id="local.repo" path="${maven-repo}"/>
		<mvn:dependencies filesetId="unicorex.dependencies" useScope="runtime">
			<remoteRepository refid="vsgc-public" />
			<localRepository refid="local.repo" />
                        <pom file="pom.xml"/>  
		</mvn:dependencies>

		<mvn:dependencies filesetId="endorsed.dependencies" useScope="runtime">
			<remoteRepository refid="vsgc-public" />
			<localRepository refid="local.repo" />
			<dependency groupId="commons-logging" artifactId="commons-logging" version="1.1" />
			<dependency groupId="org.apache.santuario" artifactId="xmlsec" version="1.4.4" />
		</mvn:dependencies>

		<copy todir="${libs}">
			<fileset refid="unicorex.dependencies"/>
			<mapper type="flatten"/>
		</copy>
		<copy todir="${libs}/endorsed">
			<fileset refid="endorsed.dependencies"/>
			<mapper type="flatten"/>
		</copy>

		<delete>
			<fileset dir="${libs}" includes="*.pom"/>
			<fileset dir="${libs}/endorsed" includes="*.pom"/>
		</delete>
	</target>


	<!-- Build the rpm package -->

	<target name="rpm" depends="rpm-prepare,rpm-copy-jars,rpm-build"/>

	<target name="rpm-copy-jars" depends="update-jars">
		<echo>... copying jar files </echo>

		<copy todir="${rpm-libs}">
			<fileset dir="${libs}" includes="*.jar"/>
		</copy>

		<copy todir="${rpm-libs}/endorsed">
			<fileset dir="${libs}/endorsed" includes="*.jar"/>
		</copy>

	</target>

	<target name="rpm-prepare">
		<echo>... preparing RPM </echo>

		<echo>   ... creating directories </echo>
		<mkdir dir="${rpm-base}"/>
		<mkdir dir="${rpm-libs}"/>
		<mkdir dir="${rpm-base}/usr/share/doc/unicore/unicorex"/>
		<mkdir dir="${rpm-base}/var/log/unicore/unicorex"/>
		<mkdir dir="${rpm-base}/var/lib/unicore/unicorex"/>
		<mkdir dir="${rpm-base}/var/run/unicore"/>

                <echo>   ... copying files </echo>
		<copy todir="${rpm-base}" >
			<fileset dir="${rpm-src}" includes="**/*"/>
		</copy>

		<copy todir="${rpm-base}/usr/share/doc/unicore/unicorex/" >
			<fileset dir="." includes="README.txt"/>
		</copy>

		<exec dir="${rpm-base}/usr/sbin/" executable="chmod" failonerror="true">
			<arg value="-R"/>
			<arg value="+x"/>
			<arg value="."/>
		</exec>

	</target>

	<target name="rpm-build">
		<echo>... building RPM </echo>

		<echo>   ... copy update spec file to target folder </echo>
		<exec dir="." executable="chmod" failonerror="true">
			<arg value="+rwx"/>
			<arg value="./update-specfile.py"/>
		</exec>
		<exec dir="." executable="cp" failonerror="true">
			<arg value="update-specfile.py"/>
			<arg value="target/"/>
		</exec>

		<echo>   ... updating spec file </echo>
		<exec dir="target" executable="./update-specfile.py" failonerror="true">
			<arg value="${version}"/>
			<arg value="${release}"/>
		</exec>
                <delete file="target/rpm/unicore-unicorex.spec_template"/>

		<echo>   ... building RPM </echo>
		<exec dir="${rpm-base}" executable="rpmbuild" failonerror="true">
			<arg value="-bb"/>
			<arg value="--buildroot"/>
			<arg value="${rpm-base}"/>
			<arg value="../unicore-unicorex.spec"/>
		</exec>
	</target>

	<!-- Build the deb package -->

	<target name="deb-prepare" depends="update-jars">

		<echo>   ... building DEB </echo>

		<echo>      ... copying files </echo>
		<mkdir dir="${deb-base}"/>
		<mkdir dir="${deb-base}/lib"/>
		<mkdir dir="${deb-base}/conf"/>

		<copy todir="${deb-base}/lib" >
			<fileset dir="${libs}" includes="*.jar"/>
		</copy>

		<copy todir="${deb-base}/conf" >
			<fileset dir="src/main/conf" includes="**/*"/>
		</copy>

		<copy todir="${deb-base}/debian" >
			<fileset dir="${deb-src}/debian" includes="**/*"/>
		</copy>

		<copy todir="${deb-base}/unicorex_debian" >
			<fileset dir="${deb-src}/unicorex_debian" includes="**/*"/>
		</copy>

		<copy todir="${deb-base}/doc" >
			<fileset dir="." includes="*.txt"/>
		</copy>

		<exec dir="${deb-base}/debian" executable="chmod" failonerror="true">
			<arg value="+x"/>
			<arg value="rules"/>
		</exec>

	</target>


	<target name="deb" depends="setProps, deb-prepare">
		<echo>      ... building package </echo>
		<exec dir="${deb-base}" executable="dpkg-buildpackage" failonerror="true">
			<arg value="-rfakeroot"/>
		</exec>

	</target>

	<!-- Clean  -->

	<target name="clean" depends="">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${rpm-base}"/>
			<fileset dir="${deb-base}"/>
			<fileset dir="target" includes="*.deb"/>
			<fileset dir="target" includes="*.rpm"/>
		</delete>
	</target>


</project>
