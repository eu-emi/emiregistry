Getting Started
---------------

Some intro here...
This guide describes the installation and configuration for the binary release.

Prerequisites
~~~~~~~~~~~~~

To run EMI Registry, you need the SUN or OpenJDK Java 6 (JRE or SDK). 
If not installed on your system, you can download it 
from http://java.oracle.com[http://java.oracle.com]

* Linux based operating system
* MongoDB[www.mongodb.org]

REST Interface: URI design
~~~~~~~~~~~~~~~~~~~~~~~~~~

The EMI Registry allows Services to register/publish their capabilities
while the Service Consumers are able the find the Service information in
the large scale infrastructure.

This section contains the description of the interface that allows the
maintenace of and access to service entries by presenting the individual
URIs and their description. The presented examples shows a package to be
sent. Since the interface is a REST one, the required HTTP methods are also
presented at the given features.

Register new Services
^^^^^^^^^^^^^^^^^^^^^

METHOD: POST +
URI: http://registry.example.com:54321/serviceadmin

The message must contain a JSON Array object that contains the
description of the Services to be registered. The new entries will be
created in the EMI Registry database.

.An example JSON Array:
....
include::../../../src/main/java/eu/emi/dsr/resource/servicemodel.json[]
....

Update Service information
^^^^^^^^^^^^^^^^^^^^^^^^^^

METHOD: PUT +
URI: http://registry.example.com:54321/serviceadmin

The message must contain a JSON array object that contains the
description of the Services to be updated. The Service Entries
identified by the `Service_Endpoint_URL` key in the individual JSON
objects will be updated respectively if the client is properly
authorized and the method were allowed by the security plugins.

Delete existing Services
^^^^^^^^^^^^^^^^^^^^^^^^

METHOD: DELETE +
URI:
http://registry.example.com:54321/serviceadmin?Service_Endpoint_URL=&lt;URL&gt;[http://registry.example.com:54321/serviceadmin?Service_Endpoint_URL=&lt;URL&gt;]

The Service Entry identified by the URL will be deleted from the
database if the client is properly authorized and the method were
allowed by the security plugins.

Query the EMI Registry database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

METHOD: GET +
URI:
http://registry.example.com:54321/services/query?&lt;SearchTerm&gt;[http://registry.example.com:54321/services/query?&lt;SearchTerm&gt;] +
URI:
http://registry.example.com:54321/services/query.xml?&lt;SearchTerm&gt;[http://registry.example.com:54321/services/query.xml?&lt;SearchTerm&gt;]

Example: http://registry.example.com:54321/services/query?Service_Type=eu.eu-emi.emies

The +services+ interface can be used for querying the EMI Registry
database. The search term can be defined by the GET parameters of the
HTTP request like in the example shown above. The result in the first
case is a JSON Array object. The second presented way provide an XML
format result. Spot the `.xml` extension after query part of the path!

Single Registry Deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~

...


Federated Registry Deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

...

